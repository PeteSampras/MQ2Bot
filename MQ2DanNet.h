#pragma once

#ifdef MQ2DANNET_NODE_EXPORTS
#define MQ2DANNET_NODE_API __declspec(dllexport)
#else
#define MQ2DANNET_NODE_API __declspec(dllimport)
#endif

namespace MQ2DanNet {
	class Node final {
	public:
		MQ2DANNET_NODE_API static Node& get();

		MQ2DANNET_NODE_API void join(const std::string& group);
		MQ2DANNET_NODE_API void leave(const std::string& group);

		MQ2DANNET_NODE_API void on_join(std::function<bool(const std::string&, const std::string&)> callback);
		MQ2DANNET_NODE_API void on_leave(std::function<bool(const std::string&, const std::string&)> callback);

		MQ2DANNET_NODE_API const std::string get_info();
		MQ2DANNET_NODE_API const std::set<std::string> get_peers();
		MQ2DANNET_NODE_API const std::set<std::string> get_all_groups();
		MQ2DANNET_NODE_API const std::set<std::string> get_own_groups();
		MQ2DANNET_NODE_API const std::map<std::string, std::set<std::string> > get_group_peers();
		MQ2DANNET_NODE_API const std::set<std::string> get_group_peers(const std::string& group);
		MQ2DANNET_NODE_API const std::set<std::string> get_peer_groups(const std::string& peer);
		MQ2DANNET_NODE_API const std::string get_interfaces();
		MQ2DANNET_NODE_API const std::string get_full_name(const std::string& name);

		// quick helper function to safely init strings from chars
		MQ2DANNET_NODE_API static std::string init_string(const char *szStr);

		// finds and inserts the next int key, returns `"response" + new_key`
		// this is generated by the requester
		MQ2DANNET_NODE_API std::string register_response(std::function<bool(std::stringstream&&)> callback);
		MQ2DANNET_NODE_API void respond(const std::string& name, const std::string& cmd, std::stringstream&& args);

		struct Observation final {
			std::string output;
			std::string data;
			unsigned __int64 received;

			Observation(const Observation& obs) : output(obs.output), data(obs.data), received(obs.received) {}
			Observation(const std::string& output) : output(output), data("NULL"), received(0) {}
			Observation(const std::string& output, const std::string& data, unsigned __int64 received) : output(output), data(data), received(received) {}
			Observation() : output(), data("NULL"), received(0) {}
		};

		// finds query and returns the observation group, generates new group name if query not found
		MQ2DANNET_NODE_API std::string register_observer(const std::string& group, const std::string& query);
		MQ2DANNET_NODE_API void unregister_observer(const std::string& query);
		MQ2DANNET_NODE_API void observe(const std::string& group, const std::string& name, const std::string& query);
		MQ2DANNET_NODE_API void forget(const std::string& group);
		MQ2DANNET_NODE_API void forget(const std::string& name, const std::string& query);
		MQ2DANNET_NODE_API void update(const std::string& group, const std::string& data, const std::string& output);
		MQ2DANNET_NODE_API const Observation read(const std::string& group);
		MQ2DANNET_NODE_API const Observation read(const std::string& name, const std::string& query);
		MQ2DANNET_NODE_API bool can_read(const std::string& name, const std::string& query);
		MQ2DANNET_NODE_API void publish(const std::string& group, const std::string& cmd, std::stringstream&& args);
	};
}